#include <FastLED.h>

#define NUM_LEDS 4
#define LED_PIN 6
#define ANALOG_READ 0

#define MIC_LOW 0.0
#define MIC_HIGH 737.0

#define AVGLEN 5
#define LONG_SECTOR 20

//Mneumonics
#define HIGH 3
#define NORMAL 2

//Kolko dolgo bo izvajal "current average" zvok preden resetiramo meritve
#define MSECS 30 * 1000
#define CYCLES MSECS / DELAY

#define DEV_THRESH 0.8

//Arduino loop delay
#define DELAY 1

float fscale( float originalMin, float originalMax, float newBegin, float newEnd, float inputValue, float curve);
void insert(int val, int *avgs, int len);
int compute_average(int *avgs, int len);
void visualize_music();

//Koliko LED-ic bomo uporabili
int curshow = NUM_LEDS;

int mode = 0;

//Prikaz rezličnih barv v odnosu na MODE
int songmode = NORMAL;

//Izmerjeni "Average sound" v zadnjem ciklu
unsigned long song_avg;

int iter = 0;

//Hitrost fade-a
float fade_scale = 1.2;

CRGB leds[NUM_LEDS];

int avgs[AVGLEN] = {-1};

//Zvok .avg
int long_avg[LONG_SECTOR] = {-1};

//Beleži vreme koliko so v MODU
struct time_keeping {
  unsigned long times_start;
  short times;
};

//Definicija barv
struct color {
  int r;
  int g;
  int b;
};

struct time_keeping high;
struct color Color;

void setup() {
  Serial.begin(9600);
  FastLED.addLeds<NEOPIXEL, LED_PIN>(leds, NUM_LEDS);
  for (int i = 0; i < NUM_LEDS; i++)
    leds[i] = CRGB(0, 0, 255);
  FastLED.show();
  delay(1000);

  for (int i = 0; i < AVGLEN; i++) {
    insert(250, avgs, AVGLEN);
  }

  high.times = 0;
  high.times_start = millis();
  Color.r = 0;
  Color.g = 0;
  Color.b = 1;
}


void loop() {
  switch (mode) {
    case 0:
      visualize_music();
      break;
    default:
      break;
  }
  delay(DELAY);       
}


/**Funkcija s katero preverimo če smo v "HIGH mode",
  ili v "NORMAL". */
void check_high(int avg) {
  if (avg > (song_avg / iter * 1.1))  {
    if (high.times != 0) {
      if (millis() - high.times_start > 200.0) {
        high.times = 0;
        songmode = NORMAL;
      } else {
        high.times_start = millis();
        high.times++;
      }
    } else {
      high.times++;
      high.times_start = millis();

    }
  }
  if (high.times > 30 && millis() - high.times_start < 50.0)
    songmode = HIGH;
  else if (millis() - high.times_start > 200) {
    high.times = 0;
    songmode = NORMAL;
  }
}

//Glavna funkcjia sa prikaz
void visualize_music() {
  int sensor_value, mapped, avg, longavg;

  //Odčita z senzorja
  sensor_value = analogRead(ANALOG_READ);

  if (sensor_value == 0)
    return;

  //Zanemari vrdnosti ki veliko odstopajo od prejsnjeg avg.
  mapped = (float)fscale(MIC_LOW, MIC_HIGH, MIC_LOW, (float)MIC_HIGH, (float)sensor_value, 2.0);
  avg = compute_average(avgs, AVGLEN);

  if (((avg - mapped) > avg * DEV_THRESH)) 
    return;

  //Določi nove vrednosti avg. 
  insert(mapped, avgs, AVGLEN);
  insert(avg, long_avg, LONG_SECTOR);

  //Poračuna "song average" vrednost senzorja
  song_avg += avg;
  iter++;
  if (iter > CYCLES) {
    song_avg = song_avg / iter;
    iter = 1;
  }

  longavg = compute_average(long_avg, LONG_SECTOR);

  //Preveri če smo v "HIGH mode"
  check_high(longavg);

  if (songmode == HIGH) {
    fade_scale = 3;
    Color.r = 5;
    Color.g = 3;
    Color.b = -1;
  }
  else if (songmode == NORMAL) {
    fade_scale = 2;
    Color.r = -1;
    Color.b = 2;
    Color.g = 1;
  }

  //Določi koliko bo prikazanih LEDic
  curshow = fscale(MIC_LOW, MIC_HIGH, 0.0, (float)NUM_LEDS, (float)avg, -1);


  for (int i = 0; i < NUM_LEDS; i++)
    //Kolko LEDs bi prikazali
    if (i < curshow) {
      if (leds[i].r + Color.r > 255)
        leds[i].r = 255;
      else if (leds[i].r + Color.r < 0)
        leds[i].r = 0;
      else
        leds[i].r = leds[i].r + Color.r;

      if (leds[i].g + Color.g > 255)
        leds[i].g = 255;
      else if (leds[i].g + Color.g < 0)
        leds[i].g = 0;
      else
        leds[i].g = leds[i].g + Color.g;

      if (leds[i].b + Color.b > 255)
        leds[i].b = 255;
      else if (leds[i].b + Color.b < 0)
        leds[i].b = 0;
      else
        leds[i].b = leds[i].b + Color.b;

      //Fade
    } else {
      leds[i] = CRGB(leds[i].r / fade_scale, leds[i].g / fade_scale, leds[i].b / fade_scale);
    }
  FastLED.show();
}

int compute_average(int *avgs, int len) {
  int sum = 0;
  for (int i = 0; i < len; i++)
    sum += avgs[i];

  return (int)(sum / len);

}

void insert(int val, int *avgs, int len) {
  for (int i = 0; i < len; i++) {
    if (avgs[i] == -1) {
      avgs[i] = val;
      return;
    }
  }

  for (int i = 1; i < len; i++) {
    avgs[i - 1] = avgs[i];
  }
  avgs[len - 1] = val;
}

//Funkcija importirana - arduino website.
float fscale( float originalMin, float originalMax, float newBegin, float
              newEnd, float inputValue, float curve) {

  float OriginalRange = 0;
  float NewRange = 0;
  float zeroRefCurVal = 0;
  float normalizedCurVal = 0;
  float rangedValue = 0;
  boolean invFlag = 0;


  // condition curve parameter
  // limit range

  if (curve > 10) curve = 10;
  if (curve < -10) curve = -10;

  curve = (curve * -.1) ; // - invert and scale - this seems more intuitive - postive numbers give more weight to high end on output
  curve = pow(10, curve); // convert linear scale into lograthimic exponent for other pow function

  // Check for out of range inputValues
  if (inputValue < originalMin) {
    inputValue = originalMin;
  }
  if (inputValue > originalMax) {
    inputValue = originalMax;
  }

  // Zero Refference the values
  OriginalRange = originalMax - originalMin;

  if (newEnd > newBegin) {
    NewRange = newEnd - newBegin;
  }
  else
  {
    NewRange = newBegin - newEnd;
    invFlag = 1;
  }

  zeroRefCurVal = inputValue - originalMin;
  normalizedCurVal  =  zeroRefCurVal / OriginalRange;   // normalize to 0 - 1 float

  // Check for originalMin > originalMax  - the math for all other cases i.e. negative numbers seems to work out fine
  if (originalMin > originalMax ) {
    return 0;
  }

  if (invFlag == 0) {
    rangedValue =  (pow(normalizedCurVal, curve) * NewRange) + newBegin;

  }
  else     // invert the ranges
  {
    rangedValue =  newBegin - (pow(normalizedCurVal, curve) * NewRange);
  }

  return rangedValue;
}


